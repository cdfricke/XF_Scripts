// CREATED BY CONNOR FRICKE, 29-FEB-2024
// ProjectSensors Script (.xmacro)
// This script will add some necessary sensors to the project tree. In the case of
// my first attempt at doing so, I will simply create a planar sensor and far zone sensor.
// For specifying geometry, we need CoordinateSystemPosition and CoordinateSystemDirection
// objects, of which I defined some common ones below.
// **********************************************************

var parameter = "Z";

var proj = App.getActiveProject();
var nearFieldsList = proj.getNearFieldSensorList();
nearFieldsList.clear();
var farZonesList = proj.getFarZoneSensorList();
farZonesList.clear();

// *** Commonly Used Positions and Directions ***
var origin = new CoordinateSystemPosition(0, 0, 0);
var zhat = new CoordinateSystemDirection(0, 0, 1);
var yhat = new CoordinateSystemDirection(0, 1, 0);
var xhat = new CoordinateSystemDirection(1, 0, 0);

// *** CREATE NEAR FIELD SENSOR ***
var planarSensor = new SurfaceSensor();
planarSensor.name = "XY-Plane Sensor";

// *** GEOMETRY FOR NEAR FIELD SENSOR ***
var planeSurfaceGeometry = new PlaneSurfaceGeometry();
planeSurfaceGeometry.setPosition(origin);	// centered at origin

if (parameter.toUpperCase() == "Z")
	planeSurfaceGeometry.setNormal(zhat);
else if (parameter.toUpperCase() == "Y")
	planeSurfaceGeometry.setNormal(yhat);
else if (parameter.toUpperCase() == "X")
	planeSurfaceGeometry.setNormal(xhat);
else
	Output.println("ERROR: in CreatePlanarSensor(), passed parameter faulty.")

planarSensor.setGeometry(planeSurfaceGeometry);	// apply this geometry to our SurfaceSensor object

// *** SENSOR DEFINITION FOR NEAR FIELD SENSOR ***
// Here I've listed all options available to the SurfaceSensorDataDefinition class. Only a few are used.
var planarSensorDef = new SurfaceSensorDataDefinition();
planarSensorDef.setCollectEFieldsVsTime(true);	// this
planarSensorDef.setCollectHFieldsVsTime(false);
planarSensorDef.setCollectJFieldsVsTime(false);
planarSensorDef.setCollectBFieldsVsTime(false);
planarSensorDef.setCollectScatteredEFieldsVsTime(true);	// this
planarSensorDef.setCollectScatteredHFieldsVsTime(false);
planarSensorDef.setCollectScatteredBFieldsVsTime(false);
planarSensorDef.setCollectSteadyEFieldsVsFreqOfInterest(true); // this
planarSensorDef.setCollectSteadyHFieldsVsFreqOfInterest(false);
planarSensorDef.setCollectSteadyBFieldsVsFreqOfInterest(false);
planarSensorDef.setCollectSteadyJFieldsVsFreqOfInterest(false);
planarSensorDef.setCollectDissipatedPowerDensityVsFreqOfInterest(false);
planarSensor.setDataDefinition(planarSensorDef)

// *** CREATE FAR ZONE SENSOR ***
var farZone = new FarZoneSensor();
farZone.name = "All";

// *** DETAILS FOR FAR ZONE SENSOR ***
farZone.CoordinateSystemType = "ThetaPhi";
farZone.setAngle1StartRadians(0);			// theta start
farZone.setAngle1StopRadians(Math.PI);		// theta stop
farZone.setAngle2StartRadians(0);			// phi start
farZone.setAngle2StopRadians(2*Math.PI);	// phi stop
farZone.retrieveSteadyStateData = true;

// *** ADD SENSORS TO LISTS ***
nearFieldsList.addNearFieldSensor(planarSensor)
farZonesList.addFarZoneSensor(farZone)

App.saveCurrentProject();

